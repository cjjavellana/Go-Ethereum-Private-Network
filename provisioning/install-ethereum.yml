---
- hosts: all
  vars:
    go_ethereum_bin_var: geth-linux-amd64-1.9.12-b6f1c8dc
    eth_testnet_dir_var: /workspace/eth-testnet

  tasks:

    - command: stat /workspace/eth-testnet
      register: testnet_exists
      ignore_errors: True

    - name: Download Go Ethereum Linux Binary
      get_url:
        url: 'https://gethstore.blob.core.windows.net/builds/{{ go_ethereum_bin_var }}.tar.gz'
        dest: '/tmp/{{ go_ethereum_bin_var }}.tar.gz'
        mode: '0660'
      when: testnet_exists is failed

    - name: Create ETH TestNet Directory
      file:
        path: '{{ eth_testnet_dir_var }}'
        state: directory
      when: testnet_exists is failed

    - name: Extract Go Ethereum Binary
      unarchive:
        src: '/tmp/{{ go_ethereum_bin_var }}.tar.gz'
        dest: '{{ eth_testnet_dir_var }}'
      when: testnet_exists is failed
      
    - name: Add geth to the PATH variable
      blockinfile:
        path: /etc/profile.d/custom-path.sh
        block: |
          export PATH=$PATH:/workspace/eth-testnet/{{ go_ethereum_bin_var }}
      become: yes
      when: testnet_exists is failed

    - name: Create Signer Account
      copy:
        src: /vagrant/signerpwd.txt
        dest: '{{ eth_testnet_dir_var }}/signerpwd.txt'

    - name: Create Signer Account
      command: geth account new --datadir data1 --password signerpwd.txt
      register: create_signer_acct_output
      args:
        chdir: '{{ eth_testnet_dir_var }}'
      when: testnet_exists is failed

    - debug:
        msg: Create signer account output is {{ create_signer_acct_output }}
      when: testnet_exists is failed

    - name: Get Signer Address
      set_fact:
        re: 'Public address of the key:\s+0x(?P<public_key>[a-zA-Z0-9]+)'
      when: testnet_exists is failed

    - set_fact:
        signer_public_key: "{{ create_signer_acct_output.stdout | regex_search(re, '\\g<public_key>') }}"
      when: testnet_exists is failed

    - set_fact:
        signer_public_key: '{{ signer_public_key[0] }}'
      when: testnet_exists is failed
    
    - name: Write Signer Key to file
      copy:
        dest: /workspace/eth-testnet/eth.env
        content: 'SIGNER_KEY=0x{{ signer_public_key }}'
      when: testnet_exists is failed

    - debug:
        var: signer_public_key

    - name: Prepare Genesis JSON File
      template:
        src: /vagrant/genesis.json
        dest: '{{ eth_testnet_dir_var }}/genesis.json'
      when: testnet_exists is failed

    - name: Initialize Node1 GETH database
      command: geth init --datadir data1 genesis.json
      args:
        chdir: /workspace/eth-testnet
      when: testnet_exists is failed

    - name: Permanently Disable SELinux
      replace:
        path: /etc/sysconfig/selinux
        regexp: '^SELINUX=enforcing$'
        replace: 'SELINUX=disabled'
      become: yes
      when: testnet_exists is failed

    - name: Disable SELinux - Only for this session
      command: setenforce 0
      become: yes
      ignore_errors: True
      when: testnet_exists is failed

    - name: Copy geth-bootstrap service to /usr/lib/systemd/system
      copy:
       src: /vagrant/geth-bootstrap.service
       dest: /usr/lib/systemd/system/geth-bootstrap.service
      become: yes
      when: testnet_exists is failed

    - name: Enable geth-bootrap on startup
      command: systemctl enable geth-bootstrap
      become: yes
      when: testnet_exists is failed

    - name: Start Bootstrap Node
      command: systemctl start geth-bootstrap
      become: yes
      when: testnet_exists is failed

    - name: Get Bootstrap Node Record
      command: geth attach data1/geth.ipc --exec admin.nodeInfo.enr
      register: bootstrap_enr
      args:
        chdir: /workspace/eth-testnet
      when: testnet_exists is failed

    - debug:
        var: bootstrap_enr

    - name: Write bootstrap enr record to file
      blockinfile:
        path: /workspace/eth-testnet/eth.env
        block: |
          {{ bootstrap_enr.stdout }}
      when: testnet_exists is failed

    - name: Strip Quotes in bootstrap.enr
      replace:
        path: /workspace/eth-testnet/eth.env
        regexp: '"(.*)"'
        replace: 'BOOTSTRAP_ENR=\1'
      when: testnet_exists is failed

    - name: Initialize Node2 GETH database
      command: geth init --datadir data2 genesis.json
      args:
        chdir: /workspace/eth-testnet
      when: testnet_exists is failed

    - name: Copy geth-member service to /usr/lib/systemd/system
      copy:
        src: /vagrant/geth-member.service
        dest: /usr/lib/systemd/system/geth-member.service
      become: yes
      when: testnet_exists is failed

    - name: Enable geth-member on startup
      command: systemctl enable geth-member
      become: yes
      when: testnet_exists is failed

    - name: Start Member Node
      command: systemctl start geth-member
      become: yes
      when: testnet_exists is failed

